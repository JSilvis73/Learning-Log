Dotnet Cheatsheet


| Concept                         | ðŸ’¡ Quick Summary                                                                                                                      |
| ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| **Dependency Injection (DI)**      | A way to automatically "inject" needed services (like your database or logger) into classes, making them easier to test and maintain. |
| **Configuration**                  | Your app's settings and secrets (like connection strings) are stored in files like `appsettings.json` or environment variables.       |
| **Middleware**                     | Pieces of code that process every HTTP request (e.g., authentication, CORS, routing). You configure these in `Program.cs`.            |
| **Routing & Controllers**          | Maps HTTP endpoints (e.g., `/api/patients`) to specific methods inside your `Controller` classes.                                     |
| **Model Binding & Validation**     | Automatically converts incoming JSON or form data into C# models, and validates them using attributes like `[Required]`.              |
| **Entity Framework Core**          | Handles your database interactions. You define models, generate migrations, and use LINQ to query your database.                      |
| **DTOs (Data Transfer Objects)**   | Lightweight C# classes used to shape and secure data sent/received via your API (prevents over-posting or leaking info).              |
| **Authentication & Authorization** | Ensures users are who they say they are, and restricts what actions they can take based on roles or policies.                         |
| **Logging**                        | Tracks events, errors, and app behavior across environments (for debugging, auditing, etc).                                           |

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸªµ What Are Log Levels?
Log levels represent the severity or importance of an event in your application. They help developers:

Understand what happened

Troubleshoot issues

Monitor runtime behavior in different environments (dev, staging, prod)

ðŸ”‘ Log Level Summary
Level	Purpose	Example Use
ðŸ”´ Critical	Fatal errors that crash the app or require immediate attention	Database corruption, system-wide failure
ðŸŸ  Error	Operational errors that prevent specific functionality	API call failed, DB insert threw exception
ðŸŸ¡ Warning	Unexpected but non-fatal issues	Invalid input, config fallback
ðŸ”µ Information	Normal operations and high-level tracking	User login, service started
ðŸŸ¢ Debug	Internal app details for developers	Variable values, branch logic
âšª Trace	Extremely detailed flow tracking	Deep diagnostics, method call chains


